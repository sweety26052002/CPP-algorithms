DFS---->Depth first search
We will use visted array and we follow recurssion.

Let us consider an example
5(nodes) 6(edges)           2 --------4           
1 2                        /         /|
1 3                       /         / |
2 4                      1         /  |
3 4                        \      /   |
3 5                          \   /    |
4 5                            3------5   

Create a adjacency list
1--->2 3
2--->1 4
3--->1 4 5
4--->2 3 5
5--->3 4

First we will call dfs(1) and then it calls dfs(2)
                            dfs(1)
                              |
                              |
                            dfs(2)
                              |
                              |
                            dfs(4)
                              |   \
                              |     \
                            dfs(3)   dfs(5)
                            /  \       / \
                           x     x    x    x
CODE:

#include<bits/stdc++.h>
using namespace std;

void DFS(int node, vector<int>&vis, vector<int>adj[])
{
	vis[node]= 1;
	cout<<node<<" ";
	for(auto it:adj[node])
	{
		if(vis[it]!=1)
			DFS(it,vis,adj);
	}
}
int main()
{
	int n, m;
	cin>>n>>m;
	vector<int> adj[n+1];
	for(int i=0;i<m;i++)
	{
		int u,v;
		cin>>u>>v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	vector<int> vis(n+1,0);
	DFS(1,vis,adj);
}
