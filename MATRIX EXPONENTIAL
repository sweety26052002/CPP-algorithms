MATRIX EXPONENTIAL
This is applicable linear recursive problems.
It has time complexity O(LogN).
Suppose if we have a matrix A,
       1  1
A  =
      -1   2
if we want to find A^15.....we normally write the code in O(N) which is 15 times.If it 100 times it leads to TLE(Time Limit Exceeded).
By using MATRIX EXPONENTIAL we can write our programme in O(LogN) which saves our time and it does not lead to Time Limit Exceeded.
CODE:

#include<bits/stdc++.h>
using namespace std;
struct Matrix
{ 
	int mat[2][2];
};
Matrix identity()
{
	Matrix c;
	c.mat[0][0]=1,c.mat[0][1]=0;
	c.mat[1][0]=0,c.mat[1][1]=1;
	return c;
}
Matrix MultiplyMatrices(Matrix A,Matrix B)
{
	Matrix c;
	for(int row=0;row<2;row++)
	{
		for(int col=0;col<2;col++)
		{
			int res=0;
			for(int i=0;i<2;i++)
			{
				res+=A.mat[row][i]*B.mat[i][col];
			}
			c.mat[row][col]=res;
		}
	}
	return c;
}
Matrix matrixpower(Matrix A,int n)
{
	if(n==0)return identity();
	Matrix x=matrixpower(A,n/2);
	if(n%2==0)return MultiplyMatrices(x,x);
	else return MultiplyMatrices(MultiplyMatrices(x,x),A);
}

int main()
{
Matrix A;
A.mat[0][0]=1,A.mat[0][1]=2;
A.mat[1][0]=1,A.mat[1][1]=0;
int n;
cin>>n;
Matrix B;
B=matrixpower(A,n);
cout<<B.mat[0][0]<<" "<<B.mat[0][1]<<endl;
cout<<B.mat[1][0]<<" "<<B.mat[1][1]<<endl;
}
